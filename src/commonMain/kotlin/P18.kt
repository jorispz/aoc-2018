// 1: 495236
// 2: 201348
val p18 = fun() {
    val input = input_18.lines().drop(1)
    val height = input.first().length
    val width = input.size
    val world = Array(width) { CharArray(height) }
    input.forEachIndexed { y, line -> line.forEachIndexed { x, c -> world[x][y] = c } }

    val generations = mutableListOf(world)
    repeat(10) {
        generations.add(tick(generations.last()))
    }

    generations.last().score().print { "Part 1: score after 10 rounds = $it" }

    do {
        generations.add(tick(generations.last()))
    } while (generations.count { it.same(generations.last()) } == 1)

    val periodStart = generations.indexOfFirst { it.same(generations.last()) }
    val periodLength = generations.size - 1 - periodStart

    val stepsFromStartOfPeriod = (1000000000 - periodStart) % periodLength
    generations[periodStart + stepsFromStartOfPeriod].score().print { "Part 2: score after 1000000000 rounds = $it" }

}

fun tick(current: Array<CharArray>): Array<CharArray> {
    val width = current.size
    val height = current[0].size
    val next = Array(width) { CharArray(height) }
    for (x in 0 until width) {
        for (y in 0 until height) {
            val c = current[x][y]
            val neighbours = ((x - 1).coerceAtLeast(0)..(x + 1).coerceAtMost(width - 1)).flatMap { i ->
                ((y - 1).coerceAtLeast(0)..(y + 1).coerceAtMost(height - 1)).map { j ->
                    current[i][j]
                }
            }.minus(c)
            next[x][y] = when (c) {
                '.' -> if (neighbours.count { it == '|' } >= 3) '|' else '.'
                '|' -> if (neighbours.count { it == '#' } >= 3) '#' else '|'
                '#' -> if (neighbours.count { it == '#' } >= 1 && neighbours.count { it == '|' } >= 1) '#' else '.'
                else -> error("unknown")
            }

        }
    }
    return next
}

fun Array<CharArray>.score(): Int {
    val width = this.size
    val height = this[0].size
    var trees = 0
    var lumberyards = 0
    for (x in 0 until width) {
        for (y in 0 until height) {
            when (this[x][y]) {
                '#' -> lumberyards++
                '|' -> trees++
            }
        }
    }
    return trees * lumberyards
}


fun Array<CharArray>.same(other: Array<CharArray>): Boolean {
    val width = this.size
    val height = this[0].size

    for (x in 0 until width) {
        for (y in 0 until height) {
            if (this[x][y] != other[x][y]) return false
        }
    }
    return true
}

val input_18_test = """
.#.#...|#.
.....#|##|
.|..|...#.
..|#.....#
#.#|||#|#|
...#.||...
.|....|...
||...#|.#|
|.||||..|.
...#.|..|."""

val input_18 = """
#|#..||.||....|.#..|#.|#......|.#....#..|...|#.#.#
#|...#..#.|..#..#...|..##.|....#|....#|.|..#......
......|.#.|.##.|.|.#..#.|...#...##..||...|..##|.#.
.###..#.#|..#.#.|...#|||.#|..#..|.|..#....#...#..|
.#|.|...|.#.##|.##....#..|...|...|.....#..#|...|.#
....||.#|.#|#..#.#|.....|.#..#.||#||.#....||#.....
#.#.#.|.|.|.|#.#.##|.........#.##.#|..||.##.......
.|.#.#...##.#.||..#|..|##...##...#.|..||.#.||....#
.||.|.#.#....|#|#..#|#.#..#||#..||.|....#|..|.....
##|.||.#...|.||..|..|.|...##.|||...|....#..|.|..|.
.##.|...|..|.....|#.|#.|#..|#....##|......|#.##...
|.###||...||..##...#.#||#.#.....|#..|#|..|.|.#.#..
..|#..#..|..#|||..||#.|#.......|..||......|##.....
##||...#.#...........#|###|...|..#|.....|.|..###..
.#.#...#|.|.|...|....#|.|#.#..#....##|..||..|.....
...#||...|##.#....|||....##|.|#|...|...#.||...|.##
...#.||...|.|.#...#.....#.|##|..|..#.|.#...|..|.#.
...|.#.###.|.||#|..#.|.#.#.........#...|...#.#|#|.
|..|....||.#...|#.#|.#.|.....#.###.|##.|....|.#|..
..#..#|.|.|.||##....#..||||...|.......#.#.......#.
..|....|.....#....|....#.|.#|#..||##.##......|.|#.
#..|.|..#.|||###|..|.#.#|.#...|...||........#..|#.
..#|...#..#....#....#.##...#...#.|...|......#..||.
#|#|...#...|...|..#|...|..#..|.#||..#.||.....|..#|
.||...#.|..|#||||...|..|##..|.#..|#|.##.....|#.||.
#|#.#...|...|......##|..#.|#.|.|....|.....|.#....#
...|....#..#.#|##..#..#||.....|.#|.#|#.||.||.#..#.
........#..##.......#...#..##......#.......#.#..|.
.|.|.#.||......#..||..|...##...#..#|..|.#....#|#..
##...|##....|||.##||..|....##.....|##||..|....#..#
.###.||..|..|..#||#.|#..|..#||#.#.#.##...|....#|#.
..##|.|..|.||...##|#||.........##|.....|#.|#..||..
....#...#|##.|.|.....#|...|..|....|||..|......#...
........|......|.|.....#.|......#......||....#.#.|
.....#|#..|#.||.|...#|#.....||#..|.#..|..|.#.||.#.
.||..|.##..#|...#....|..|..|.....||#......#|..|...
###.|.##..|.|##.|.||..##..#..|..#.#|.|#...##|##...
..##|..#..###..#.#......|.......|#.#.......|..||#|
#..|..|..#....|#|.......#||..#|........#..#.||.|.#
...#.|.#.......#|.....|................|..|#..#.|#
..|..#....|....|.|....#|#..#..#.###.#....#|..|.##.
#.|....#...|.|..|..||....||.#..#|#..#..###||.|#.#|
.|......|#.#|.|..#....|....#.........###..||.#.#|.
....###.#|.....#|...|.#.|..#...........#.......#||
.#|...|....#.#||..|..##|....|#.||..#.#...#.##||.#.
...|.||#.#...||.#|...||#.|||||..|..#..#|...#....#.
.##|||##.#|.|.#..#.....#.......|..|.|...|.|....#|.
#.#|....#.|..|.|.#..|.......#.....###.#..|......#|
.#.......|..#.#.#.|...#|.|...||#.||#.|........#.|.
..|.|##||.###.....|.|#.#|.||......#.##...|.#.#.#.."""

